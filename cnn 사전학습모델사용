{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/tmggboss78/handson-ml/blob/master/cnn%20%EC%82%AC%EC%A0%84%ED%95%99%EC%8A%B5%EB%AA%A8%EB%8D%B8%EC%82%AC%EC%9A%A9\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "metadata": {
        "id": "W9_FnGzcjOlO",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "outputId": "a521e217-b13e-4f56-8058-8cc9418e4bcb"
      },
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/gdrive', force_remount=True)"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /gdrive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "a0Z3Yb0TjSd7",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "outputId": "22252c77-1b79-483f-d0bb-56b88065607a"
      },
      "cell_type": "code",
      "source": [
        "!ls \"/gdrive/My Drive\""
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "'Colab Notebooks'  'Coursera H7P9XERTJMTT_1.png'  '프로젝트 제안서.gdoc'   img\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "VjycDIr4j_V9",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "%matplotlib inline"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "ihwOHJQ1mN_T",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 857
        },
        "outputId": "a63566f3-5866-4a6d-ed61-20f2c9870417"
      },
      "cell_type": "code",
      "source": [
        "from tensorflow.python.keras.applications.vgg16 import VGG16\n",
        "\n",
        "vgg16 = VGG16(include_top=False, input_shape=(224, 224, 3))\n",
        "vgg16.summary()"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "input_2 (InputLayer)         (None, 224, 224, 3)       0         \n",
            "_________________________________________________________________\n",
            "block1_conv1 (Conv2D)        (None, 224, 224, 64)      1792      \n",
            "_________________________________________________________________\n",
            "block1_conv2 (Conv2D)        (None, 224, 224, 64)      36928     \n",
            "_________________________________________________________________\n",
            "block1_pool (MaxPooling2D)   (None, 112, 112, 64)      0         \n",
            "_________________________________________________________________\n",
            "block2_conv1 (Conv2D)        (None, 112, 112, 128)     73856     \n",
            "_________________________________________________________________\n",
            "block2_conv2 (Conv2D)        (None, 112, 112, 128)     147584    \n",
            "_________________________________________________________________\n",
            "block2_pool (MaxPooling2D)   (None, 56, 56, 128)       0         \n",
            "_________________________________________________________________\n",
            "block3_conv1 (Conv2D)        (None, 56, 56, 256)       295168    \n",
            "_________________________________________________________________\n",
            "block3_conv2 (Conv2D)        (None, 56, 56, 256)       590080    \n",
            "_________________________________________________________________\n",
            "block3_conv3 (Conv2D)        (None, 56, 56, 256)       590080    \n",
            "_________________________________________________________________\n",
            "block3_pool (MaxPooling2D)   (None, 28, 28, 256)       0         \n",
            "_________________________________________________________________\n",
            "block4_conv1 (Conv2D)        (None, 28, 28, 512)       1180160   \n",
            "_________________________________________________________________\n",
            "block4_conv2 (Conv2D)        (None, 28, 28, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block4_conv3 (Conv2D)        (None, 28, 28, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block4_pool (MaxPooling2D)   (None, 14, 14, 512)       0         \n",
            "_________________________________________________________________\n",
            "block5_conv1 (Conv2D)        (None, 14, 14, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block5_conv2 (Conv2D)        (None, 14, 14, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block5_conv3 (Conv2D)        (None, 14, 14, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block5_pool (MaxPooling2D)   (None, 7, 7, 512)         0         \n",
            "=================================================================\n",
            "Total params: 14,714,688\n",
            "Trainable params: 14,714,688\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "UlnDqMNsmcWc",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from tensorflow.python.keras.models import Sequential\n",
        "from tensorflow.python.keras.layers import Dense, Dropout, Flatten\n",
        "\n",
        "def build_transfer_model(vgg16):\n",
        "  \n",
        "  model = Sequential(vgg16.layers)\n",
        "  \n",
        "  for layer in model.layers[:15]:\n",
        "      layer.trainble = False\n",
        "      \n",
        "  model.add(Flatten())\n",
        "  model.add(Dense(256, activation='relu'))\n",
        "  model.add(Dropout(0.5))\n",
        "  model.add(Dense(1, activation='sigmoid'))\n",
        "  \n",
        "  return model\n",
        "\n",
        "model = build_transfer_model(vgg16)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "SY3ZM7SCnMY6",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from tensorflow.python.keras.optimizers import SGD\n",
        "\n",
        "model.compile(\n",
        "    loss='binary_crossentropy',\n",
        "    optimizer=SGD(lr=1e-4, momentum=0.9),\n",
        "    metrics=['accuracy']\n",
        ")"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "kX_YjFppnn-1",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from tensorflow.python.keras.preprocessing.image import ImageDataGenerator\n",
        "from tensorflow.python.keras.applications.vgg16 import preprocess_input\n",
        "\n",
        "idg_train = ImageDataGenerator(\n",
        "     rescale=1/255.,\n",
        "     shear_range=0.1,\n",
        "     zoom_range=0.1,\n",
        "     horizontal_flip=True,\n",
        "     preprocessing_function=preprocess_input\n",
        ")"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "ZG6mqozFoLK1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 55
        },
        "outputId": "db729a26-15cd-49a5-82bb-399f12916050"
      },
      "cell_type": "code",
      "source": [
        "img_itr_train = idg_train.flow_from_directory(\n",
        "    '/gdrive/My Drive/img/shrine_temple/train',\n",
        "    target_size=(224, 224),\n",
        "    batch_size=16,\n",
        "    class_mode='binary'\n",
        ")\n",
        "\n",
        "img_itr_validation = idg_train.flow_from_directory(\n",
        "    '/gdrive/My Drive/img/shrine_temple/validation',\n",
        "    target_size=(224, 224),\n",
        "    batch_size=16,\n",
        "    class_mode='binary'\n",
        ")"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 600 images belonging to 2 classes.\n",
            "Found 200 images belonging to 2 classes.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "p6ncqcWDor4W",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "outputId": "43fe5c80-9ae0-434f-e688-f3d7621166a4"
      },
      "cell_type": "code",
      "source": [
        "import os\n",
        "from datetime import datetime\n",
        "\n",
        "model_dir = os.path.join( 'models',\n",
        "            datetime.now().strftime('%y%m%d_%H%M')\n",
        ")\n",
        "os.makedirs(model_dir, exist_ok=True)\n",
        "print('model_dir', model_dir)\n",
        "\n",
        "dir_weights = os.path.join(model_dir, 'weights')\n",
        "os.makedirs(dir_weights, exist_ok=True)"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "model_dir models/190428_1128\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "PP96mM_Vp3MO",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import json\n",
        "import pickle\n",
        "\n",
        "model_json = os.path.join(model_dir, 'model.json')\n",
        "with open(model_json, 'w') as f:\n",
        "     json.dump(model.to_json(), f)\n",
        " \n",
        "model_classes = os.path.join(model_dir, 'classes.pkl')\n",
        "with open(model_classes, 'wb') as f:\n",
        "     pickle.dump(img_itr_train.class_indices, f)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "351n_oobqfeV",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import math\n",
        "\n",
        "batch_size = 16\n",
        "steps_per_epoch = math.ceil(\n",
        "    img_itr_train.samples/batch_size\n",
        ")\n",
        "validation_steps = math.ceil(\n",
        "    img_itr_validation.samples/batch_size\n",
        ")"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "G-Xej2XKq1_h",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from tensorflow.python.keras.callbacks import ModelCheckpoint, CSVLogger\n",
        "\n",
        "cp_filepath = os.path.join(dir_weights, 'ep_{epoch: 02d}_ls_{loss:.1f}.h5')\n",
        "\n",
        "cp = ModelCheckpoint(\n",
        "     cp_filepath,\n",
        "     monitor='loss', verbose=0,\n",
        "     save_best_only=False, save_weights_only=True,\n",
        "     mode='auto',\n",
        "     period=5\n",
        "     )\n",
        "\n",
        "csv_filepath = os.path.join(model_dir, 'loss.csv')\n",
        "csv = CSVLogger(csv_filepath, append=True)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "150bhcH6r5HM",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1773
        },
        "outputId": "07a5b706-bdbe-490e-f9e8-f944ab47d853"
      },
      "cell_type": "code",
      "source": [
        "n_epoch = 30\n",
        "\n",
        "history = model.fit_generator(\n",
        "    img_itr_train,\n",
        "    steps_per_epoch=steps_per_epoch,\n",
        "    epochs=n_epoch,\n",
        "    validation_data=img_itr_validation,\n",
        "    validation_steps=validation_steps,\n",
        "    callbacks = [cp, csv]\n",
        ")"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Use tf.cast instead.\n",
            "Epoch 1/30\n",
            "13/13 [==============================] - 81s 6s/step - loss: 0.3949 - acc: 0.9100\n",
            "38/38 [==============================] - 329s 9s/step - loss: 0.6441 - acc: 0.6383 - val_loss: 0.3949 - val_acc: 0.9100\n",
            "Epoch 2/30\n",
            "13/13 [==============================] - 4s 272ms/step - loss: 0.2528 - acc: 0.9100\n",
            "38/38 [==============================] - 12s 326ms/step - loss: 0.4431 - acc: 0.8100 - val_loss: 0.2528 - val_acc: 0.9100\n",
            "Epoch 3/30\n",
            "13/13 [==============================] - 4s 294ms/step - loss: 0.2208 - acc: 0.9350\n",
            "38/38 [==============================] - 13s 335ms/step - loss: 0.3322 - acc: 0.8600 - val_loss: 0.2208 - val_acc: 0.9350\n",
            "Epoch 4/30\n",
            "13/13 [==============================] - 3s 267ms/step - loss: 0.1903 - acc: 0.9400\n",
            "38/38 [==============================] - 12s 328ms/step - loss: 0.2822 - acc: 0.8850 - val_loss: 0.1903 - val_acc: 0.9400\n",
            "Epoch 5/30\n",
            "13/13 [==============================] - 3s 269ms/step - loss: 0.1734 - acc: 0.9450\n",
            "38/38 [==============================] - 13s 339ms/step - loss: 0.2480 - acc: 0.8983 - val_loss: 0.1734 - val_acc: 0.9450\n",
            "Epoch 6/30\n",
            "13/13 [==============================] - 3s 266ms/step - loss: 0.2010 - acc: 0.9200\n",
            "38/38 [==============================] - 13s 332ms/step - loss: 0.2297 - acc: 0.9050 - val_loss: 0.2010 - val_acc: 0.9200\n",
            "Epoch 7/30\n",
            "13/13 [==============================] - 3s 267ms/step - loss: 0.1613 - acc: 0.9500\n",
            "38/38 [==============================] - 12s 329ms/step - loss: 0.1903 - acc: 0.9233 - val_loss: 0.1613 - val_acc: 0.9500\n",
            "Epoch 8/30\n",
            "13/13 [==============================] - 3s 264ms/step - loss: 0.1651 - acc: 0.9450\n",
            "38/38 [==============================] - 12s 328ms/step - loss: 0.2139 - acc: 0.9167 - val_loss: 0.1651 - val_acc: 0.9450\n",
            "Epoch 9/30\n",
            "13/13 [==============================] - 4s 286ms/step - loss: 0.1495 - acc: 0.9600\n",
            "38/38 [==============================] - 13s 334ms/step - loss: 0.1765 - acc: 0.9233 - val_loss: 0.1495 - val_acc: 0.9600\n",
            "Epoch 10/30\n",
            "13/13 [==============================] - 4s 297ms/step - loss: 0.1447 - acc: 0.9400\n",
            "38/38 [==============================] - 13s 341ms/step - loss: 0.1570 - acc: 0.9333 - val_loss: 0.1447 - val_acc: 0.9400\n",
            "Epoch 11/30\n",
            "13/13 [==============================] - 3s 264ms/step - loss: 0.1649 - acc: 0.9400\n",
            "38/38 [==============================] - 12s 327ms/step - loss: 0.1341 - acc: 0.9533 - val_loss: 0.1649 - val_acc: 0.9400\n",
            "Epoch 12/30\n",
            "13/13 [==============================] - 3s 264ms/step - loss: 0.1833 - acc: 0.9350\n",
            "38/38 [==============================] - 12s 328ms/step - loss: 0.1312 - acc: 0.9483 - val_loss: 0.1833 - val_acc: 0.9350\n",
            "Epoch 13/30\n",
            "13/13 [==============================] - 3s 265ms/step - loss: 0.1421 - acc: 0.9350\n",
            "38/38 [==============================] - 13s 330ms/step - loss: 0.1139 - acc: 0.9667 - val_loss: 0.1421 - val_acc: 0.9350\n",
            "Epoch 14/30\n",
            "13/13 [==============================] - 3s 265ms/step - loss: 0.1600 - acc: 0.9350\n",
            "38/38 [==============================] - 12s 329ms/step - loss: 0.0970 - acc: 0.9600 - val_loss: 0.1600 - val_acc: 0.9350\n",
            "Epoch 15/30\n",
            "13/13 [==============================] - 3s 262ms/step - loss: 0.1549 - acc: 0.9350\n",
            "38/38 [==============================] - 13s 329ms/step - loss: 0.0771 - acc: 0.9667 - val_loss: 0.1549 - val_acc: 0.9350\n",
            "Epoch 16/30\n",
            "13/13 [==============================] - 4s 314ms/step - loss: 0.2143 - acc: 0.9350\n",
            "38/38 [==============================] - 13s 344ms/step - loss: 0.0631 - acc: 0.9817 - val_loss: 0.2143 - val_acc: 0.9350\n",
            "Epoch 17/30\n",
            "13/13 [==============================] - 3s 264ms/step - loss: 0.1507 - acc: 0.9500\n",
            "38/38 [==============================] - 12s 327ms/step - loss: 0.0580 - acc: 0.9817 - val_loss: 0.1507 - val_acc: 0.9500\n",
            "Epoch 18/30\n",
            "13/13 [==============================] - 3s 261ms/step - loss: 0.1705 - acc: 0.9450\n",
            "38/38 [==============================] - 12s 325ms/step - loss: 0.0480 - acc: 0.9817 - val_loss: 0.1705 - val_acc: 0.9450\n",
            "Epoch 19/30\n",
            "13/13 [==============================] - 3s 264ms/step - loss: 0.1554 - acc: 0.9300\n",
            "38/38 [==============================] - 12s 327ms/step - loss: 0.0549 - acc: 0.9733 - val_loss: 0.1554 - val_acc: 0.9300\n",
            "Epoch 20/30\n",
            "13/13 [==============================] - 3s 261ms/step - loss: 0.1564 - acc: 0.9400\n",
            "38/38 [==============================] - 12s 328ms/step - loss: 0.0861 - acc: 0.9700 - val_loss: 0.1564 - val_acc: 0.9400\n",
            "Epoch 21/30\n",
            "13/13 [==============================] - 4s 313ms/step - loss: 0.1721 - acc: 0.9500\n",
            "38/38 [==============================] - 13s 343ms/step - loss: 0.0397 - acc: 0.9967 - val_loss: 0.1721 - val_acc: 0.9500\n",
            "Epoch 22/30\n",
            "13/13 [==============================] - 4s 271ms/step - loss: 0.1435 - acc: 0.9350\n",
            "38/38 [==============================] - 13s 330ms/step - loss: 0.0431 - acc: 0.9850 - val_loss: 0.1435 - val_acc: 0.9350\n",
            "Epoch 23/30\n",
            "13/13 [==============================] - 3s 262ms/step - loss: 0.1460 - acc: 0.9550\n",
            "38/38 [==============================] - 12s 327ms/step - loss: 0.0419 - acc: 0.9850 - val_loss: 0.1460 - val_acc: 0.9550\n",
            "Epoch 24/30\n",
            "13/13 [==============================] - 3s 263ms/step - loss: 0.2540 - acc: 0.9300\n",
            "38/38 [==============================] - 12s 327ms/step - loss: 0.0394 - acc: 0.9917 - val_loss: 0.2540 - val_acc: 0.9300\n",
            "Epoch 25/30\n",
            "13/13 [==============================] - 3s 261ms/step - loss: 0.1265 - acc: 0.9550\n",
            "38/38 [==============================] - 12s 328ms/step - loss: 0.0370 - acc: 0.9917 - val_loss: 0.1265 - val_acc: 0.9550\n",
            "Epoch 26/30\n",
            "13/13 [==============================] - 3s 265ms/step - loss: 0.1360 - acc: 0.9400\n",
            "38/38 [==============================] - 12s 327ms/step - loss: 0.0228 - acc: 0.9933 - val_loss: 0.1360 - val_acc: 0.9400\n",
            "Epoch 27/30\n",
            "13/13 [==============================] - 3s 261ms/step - loss: 0.1871 - acc: 0.9400\n",
            "38/38 [==============================] - 12s 326ms/step - loss: 0.0175 - acc: 0.9967 - val_loss: 0.1871 - val_acc: 0.9400\n",
            "Epoch 28/30\n",
            "13/13 [==============================] - 3s 263ms/step - loss: 0.1997 - acc: 0.9550\n",
            "38/38 [==============================] - 12s 325ms/step - loss: 0.0195 - acc: 0.9917 - val_loss: 0.1997 - val_acc: 0.9550\n",
            "Epoch 29/30\n",
            "13/13 [==============================] - 4s 309ms/step - loss: 0.1696 - acc: 0.9450\n",
            "38/38 [==============================] - 13s 342ms/step - loss: 0.0308 - acc: 0.9883 - val_loss: 0.1696 - val_acc: 0.9450\n",
            "Epoch 30/30\n",
            "13/13 [==============================] - 3s 262ms/step - loss: 0.2621 - acc: 0.9450\n",
            "38/38 [==============================] - 12s 328ms/step - loss: 0.0234 - acc: 0.9900 - val_loss: 0.2621 - val_acc: 0.9450\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "NdJVs-nayNgp",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "xW_wEjLDzmk8",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}